"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_redux_1 = require("react-redux");
const constants_1 = require("../constants");
const reselect_1 = require("reselect");
const React = require("react");
class Sub6 extends React.Component {
    constructor() {
        super();
        this.state = {};
    }
    render() {
        return (React.createElement("div", null,
            "Last, we need to set up the way the two solver couple with each other.",
            React.createElement("br", null),
            React.createElement("li", null,
                "coupling scheme:",
                React.createElement("br", null),
                React.createElement("select", { id: "", name: "" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "serial" }, "serial"),
                    React.createElement("option", { value: "parallel" }, "parallel")),
                "-",
                React.createElement("select", { id: "", name: "" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "implicit" }, "implicit"),
                    React.createElement("option", { value: "explicit" }, "explicit"))),
            React.createElement("br", null),
            React.createElement("li", null,
                "we set \"SU2_CFD\" as the first participant, and \"Calculix\" as the second participant",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "Keep in mind that, the post-processing at the convergence measures are applied at the second participant."),
            React.createElement("br", null),
            React.createElement("li", null,
                "We can also set the total simulation run time ",
                React.createElement("input", { placeholder: "max-time value" }),
                ",",
                React.createElement("br", null),
                "Length of the maximum allowed coupling timestep ",
                React.createElement("input", { placeholder: "timestep-length value" }),
                ",",
                React.createElement("br", null),
                "Maximum number of implicit sub-iterations ",
                React.createElement("input", { placeholder: "max-iterations value" }),
                ","),
            React.createElement("br", null),
            React.createElement("li", null,
                "We need to exchange data for those we've mapped in the previous step.",
                React.createElement("br", null),
                "for \"Force0\":",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "mesh:",
                React.createElement("select", { id: "exchageForceMesh", name: "exchageForceMesh" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_Mesh0" }, "SU2_Mesh0"),
                    React.createElement("option", { value: "Calculix_Mesh" }, "Calculix_Mesh")),
                React.createElement("br", null),
                "from:",
                React.createElement("select", { id: "exchageForceFrom", name: "exchageForceFrom" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_CFD" }, "SU2_CFD"),
                    React.createElement("option", { value: "Calculix" }, "Calculix")),
                "to:",
                React.createElement("select", { id: "exchageForceTo", name: "exchageForceTo" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_CFD" }, "SU2_CFD"),
                    React.createElement("option", { value: "Calculix" }, "Calculix")),
                React.createElement("br", null),
                "for \"DisplacementDeltas0\":",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "mesh:",
                React.createElement("select", { id: "exchageForceMesh", name: "exchageForceMesh" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_Mesh0" }, "SU2_Mesh0"),
                    React.createElement("option", { value: "Calculix_Mesh" }, "Calculix_Mesh")),
                React.createElement("br", null),
                "from:",
                React.createElement("select", { id: "exchageForceFrom", name: "exchageForceFrom" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_CFD" }, "SU2_CFD"),
                    React.createElement("option", { value: "Calculix" }, "Calculix")),
                "to:",
                React.createElement("select", { id: "exchageForceTo", name: "exchageForceTo" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_CFD" }, "SU2_CFD"),
                    React.createElement("option", { value: "Calculix" }, "Calculix"))),
            React.createElement("br", null),
            React.createElement("li", null,
                "We can also set the convergence measure for those we've mapped in the previous step.",
                React.createElement("br", null),
                "for \"Force0\":",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "mesh:",
                React.createElement("select", { id: "convergenceForceMesh", name: "convergenceForceMesh" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_Mesh0" }, "SU2_Mesh0"),
                    React.createElement("option", { value: "Calculix_Mesh" }, "Calculix_Mesh")),
                React.createElement("br", null),
                "limit:",
                React.createElement("input", { placeholder: "limit" }),
                React.createElement("br", null),
                "for \"DisplacementDeltas0\":",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "mesh:",
                React.createElement("select", { id: "convergenceForceMesh", name: "convergenceForceMesh" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_Mesh0" }, "SU2_Mesh0"),
                    React.createElement("option", { value: "Calculix_Mesh" }, "Calculix_Mesh")),
                React.createElement("br", null),
                "limit:",
                React.createElement("input", { placeholder: "limit" })),
            React.createElement("br", null),
            React.createElement("li", null,
                "extrapolation-order:",
                React.createElement("input", { placeholder: "extrapolation-order" })),
            React.createElement("br", null),
            React.createElement("li", null,
                "Post-processing:",
                React.createElement("br", null),
                "name: \"DisplacementDeltas0\" ",
                React.createElement("button", null, "set"),
                React.createElement("br", null),
                "mesh:",
                React.createElement("select", { id: "PostProcessingMesh", name: "PostProcessingMesh" },
                    React.createElement("option", { hidden: true, selected: true }, " -- select an option -- "),
                    React.createElement("option", { value: "SU2_Mesh0" }, "SU2_Mesh0"),
                    React.createElement("option", { value: "Calculix_Mesh" }, "Calculix_Mesh")),
                React.createElement("br", null),
                "initial-relaxation:",
                React.createElement("input", { placeholder: "initial-relaxation" })),
            React.createElement("br", null)));
    }
}
const mapStateToProps = reselect_1.createStructuredSelector({});
function mapDispatchToProps(dispatch) {
    return {
        example: () => dispatch({ type: constants_1.EXAMPLE_ACTION }),
    };
}
exports.default = react_redux_1.connect(mapStateToProps, mapDispatchToProps)(Sub6);
//# sourceMappingURL=index.js.map